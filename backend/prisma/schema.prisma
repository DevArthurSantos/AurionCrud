generator erd {
  provider                  = "prisma-erd-generator"
  output                    = env("DATABASE_ERD")
  theme                     = "default"
  includeRelationFromFields = true
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL_PROD")
  shadowDatabaseUrl = env("DATABASE_URL_DEV")
  relationMode      = "prisma"
}

model Customer {
  id                String              @id @default(uuid())
  ip                String
  token             String              @unique @default(uuid())
  requests          Int                 @default(0)
  createdAt         DateTime            @default(now())
  CustomerInstances CustomerInstances[]

  @@map("customer")
}

model Instance {
  id                String              @id @default(uuid())
  instance_name     String
  createdAt         DateTime            @default(now())
  CustomerInstances CustomerInstances[]
  InstanceFragments InstanceFragments[]

  @@map("instance")
}

model Fragment {
  id                String              @id @default(uuid())
  data              String
  createdAt         DateTime            @default(now())
  InstanceFragments InstanceFragments[]

  @@map("fragment")
}

model Template {
  id   String @id @default(uuid())
  type String
  data String

  @@map("template")
}

model CustomerInstances {
  id String @id @default(uuid())

  instance_id    String
  instance       Instance @relation(fields: [instance_id], references: [id], onDelete: Cascade)
  customer_token String
  customer       Customer @relation(fields: [customer_token], references: [token], onDelete: Cascade)

  @@index([instance_id], name: "instance_id_index")
  @@index([customer_token], name: "customer_token_index")
  @@map("customer_instances")
}

model InstanceFragments {
  id          String   @id @default(uuid())
  instance_id String
  instance    Instance @relation(fields: [instance_id], references: [id], onDelete: Cascade)
  fragment_id String
  fragment    Fragment @relation(fields: [fragment_id], references: [id], onDelete: Cascade)

  @@index([instance_id], name: "instance_id_index")
  @@index([fragment_id], name: "fragment_id_index")
  @@map("instance_fragments")
}
